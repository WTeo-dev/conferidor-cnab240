import streamlit as st
import pandas as pd
from pathlib import Path
from openpyxl import load_workbook
import base64

# === Fun√ß√µes de extra√ß√£o ===
#header ok
def extrair_header_arquivo(linha):
    return {
        "C√≥digo do Banco": linha[0:3],
        "Lote de Servi√ßo": linha[3:7],
        "Tipo de Registro": linha[7:8],
        "Exclusivo Febraban": linha[8:17],
        "Tipo de Inscri√ß√£o": linha[17:18],
        "N√∫mero de Inscri√ß√£o": linha[18:32],
        "N√∫mero do Conv√™nio": linha[32:41],
        "Cobran√ßa Cedente": linha[41:45],
        "Carteira": linha[45:47],
        "Varia√ß√£o da Carteira": linha[47:50],
        "Reservado BB": linha[50:52],        
        "Ag√™ncia": linha[52:57],
        "DV Ag√™ncia": linha[57:58],
        "Conta": linha[58:70],
        "DV Conta": linha[70:71],
        "DV Ag√™ncia/Conta": linha[71:72],
        "Nome da Empresa": linha[72:102].strip(),
        "Nome do Banco": linha[102:132].strip(),
        "Exclusivo Febraban": linha[132:142], 
        "C√≥digo Remessa": linha[142:143],
        "Data de Gera√ß√£o": linha[143:151],
        "Hora de Gera√ß√£o": linha[151:157],
        "Sequencial do Arquivo": linha[157:163],
        "Vers√£o do Layout": linha[163:166],
        "Densidade de Grava√ß√£o": linha[166:171],
        "Reservado Banco": linha[171:191].strip(),
        "Reservado Empresa": linha[191:211].strip(),
        "Reservado Febraban": linha[211:240].strip()
    }

#header lote
def extrair_header_lote(linha):
    return {
        "C√≥digo do Banco": linha[0:3],
        "Lote de Servi√ßo": linha[3:7],
        "Tipo de Registro": linha[7:8],
        "Tipo de Opera√ß√£o": linha[8:9],#R-remessa T-retorno P-baixa
        "Tipo de Servi√ßo": linha[9:11],
        "Exclusivo Febraban": linha[11:13],
        "Vers√£o do Layout": linha[13:16],
        "Exclusivo Febraban2": linha[16:17],
        "Tipo de Inscri√ß√£o": linha[17:18],
        "N√∫mero de Inscri√ß√£o": linha[18:33],
        "Conv√™nio": linha[33:42],
        "Cobran√ßa Cedente": linha[42:46],
        "Carteira": linha[46:48],
        "Varia√ß√£o da Carteira": linha[48:51],
        "Se Teste": linha[51:53], #TS-teste
        "Ag√™ncia": linha[53:58],
        "DV Ag√™ncia": linha[58:59],
        "Conta": linha[59:71],
        "DV Conta": linha[71:72],
        "DV Ag√™ncia/Conta": linha[72:73],
        "Nome da Empresa": linha[73:103].strip(),
        "Mensagem 1": linha[103:143].strip(),
        "Mensagem 2": linha[143:183].strip(),
        "Numero Remessa/retorno": linha[183:191],
        "Data de grava√ß√£o": linha[191:199],
        "Data de Cr√©dito": linha[199:207],
        "Exclusivo Febraban3": linha[207:240],
    }


def extrair_segmento_p(linha):
    return {
        "C√≥digo do Banco": linha[0:3],
        "Lote de Servi√ßo": linha[3:7],
        "Tipo de Registro": linha[7:8],
        "N¬∫ Sequencial do Registro": linha[8:13],
        "C√≥digo de Segmento": linha[13:14],
        "Exclusivo Febraban": linha[14:15],
        "Tipo de Movimento": linha[15:17], #01-entrada 02-baixa 04-abatimento 06-altera vencimento 09-protestar 10-sustar 12-alterar juros 45-negativa√ß√£o
        "Agencia da Conta": linha[17:22],
        "Digito Agenica": linha[22:23],
        "N√∫mero da Conta": linha[22:35],
        "DV Conta": linha[35:36],
        "DV Ag√™ncia/Conta": linha[36:37],
        "Nosso Numero": linha[37:57], #20 posi√ß√µes
        "C√≥digo da Carteira": linha[57:58], #2- vinculada 4- descontada 7- simples 8- premio de seguro
        "Forma de Cadastramento": linha[58:59], #1- registrada 2- sem registro        
        "Tipo de Documento": linha[59:60],        
        "Identifica√ß√£o da emiss√£o": linha[60:61],
        "Identifica√ß√£o da distribui√ß√£o": linha[61:62].strip(), #1-banco 2-cliente 3-banco envia email P-registra com qrcode pix
        "Numero do documento de cobran√ßa": linha[63:77].strip(),
        "Data de Vencimento": linha[77:85],
        "Valor Nominal": linha[85:100],
        "Ag√™ncia Cobradora": linha[100:105],
        "Digito Ag√™ncia Cobradora": linha[105:106],
        "Esp√©cie do T√≠tulo": linha[107:108],#02-Duplicata mercantilk 04-dup de servi√ßo 20-apolice de seguro
        "Aceite": linha[108:109],#A-sim N-n√£o
        "Data de Emiss√£o": linha[109:117],
        "C√≥digo do Juros": linha[117:118],#1-valor por dia 2-taxa mensal 3-isento, pode pegar dados do banco
        "Data do Juros": linha[118:126],
        "Valor do Juros": linha[127:141],#sobrepoe a taxa cadastrada no banco / descontada: desconsidera essa juros e pega o da opera√ß√£o
        "C√≥digo de Desconto 1": linha[141:142],
        "Data do Desconto 1": linha[142:150],
        "Valor do Desconto 1": linha[150:165],
        "Valor do IOF": linha[165:180],#seguro premio
        "Valor do Abatimento": linha[181:195],
        "Identifica√ß√£o do T√≠tulo na Empresa": linha[195:220].strip(), #seu numero
        "C√≥digo para Protesto": linha[220:221],#1-protestar dias corridos 2-protestar dias uteis 3-nao protestar / vinculada assumne 3 dias se nao informar
        "Dias para Protesto": linha[221:223],
        "C√≥digo para Baixa": linha[223:224],#1-baixar, 2-n√£o baixar 3-cancelar prazo baixa
        "Dias para Baixa": linha[224:227],#maximo 365. Se n√£o informado pega o cadastrado no convenio
        "C√≥digo da Moeda": linha[227:229], #02-dolar 14-euro 00-real
        "N√∫mero do Contrato": linha[229:239],#n√£o tratado pelo sistema
        "Uso Exclusivo FEBRABAN": linha[239:240]       
    }

def extrair_segmento_q(linha):
    return {
        "C√≥digo do Banco": linha[0:3],
        "Lote de Servi√ßo": linha[3:7],
        "Tipo de Registro": linha[7:8],
        "N¬∫ Sequencial do Registro": linha[8:13],
        "C√≥digo de Segmento": linha[13:14],
        "Uso Exclusivo FEBRABAN": linha[14:15],
        "Tipo de Inscri√ß√£o Sacado": linha[17:18],
        "N√∫mero de Inscri√ß√£o Sacado": linha[18:33],
        "Nome do Sacado": linha[34:73].strip(),
        "Endere√ßo": linha[73:113].strip(),
        "Bairro": linha[113:128].strip(),
        "CEP": linha[128:133],
        "Sufixo do CEP": linha[134:136],
        "Cidade": linha[137:151].strip(),
        "UF": linha[151:153],
        "Tipo de Inscri√ß√£o Sacador": linha[153:154],
        "N√∫mero de Inscri√ß√£o Sacador": linha[154:169],
        "Nome do Sacador/Avalista": linha[169:209].strip(),
        "Cod Bco Corresp Compe": linha[209:212],
        "Nosso numero Bco correspondente": linha[212:232],
        "Uso Exclusivo FEBRABAN": linha[233:240].strip()
    }

def extrair_segmento_r(linha):
    return {
        "C√≥digo do Banco": linha[0:3],
        "Lote de Servi√ßo": linha[3:7],
        "Tipo de Registro": linha[7:8],
        "N¬∫ Sequencial do Registro": linha[8:13],
        "C√≥digo de Segmento": linha[13:14],
        "Uso Exclusivo FEBRABAN": linha[14:15],
        "C√≥digo de movimento de remessa": linha[15:17],#repetir codigo de movimento do segmento P
        "C√≥digo de Desconto 2": linha[17:18],
        "Data do Desconto 2": linha[18:26],
        "Valor do Desconto 2": linha[26:41],
        "C√≥digo de Desconto 3": linha[41:42],
        "Data do Desconto 3": linha[42:50],
        "Valor do Desconto 3": linha[50:65],    
        "C√≥digo da multa": linha[65:66],#0 sem multa ou cadastro no banco 1-multa valor fixo 2-multa percentual
        "Data da multa": linha[66:74],
        "Valor da multa": linha[74:89],#sobrepoe a taxa cadastrada no banco
        "Informa√ß√£o do sacado": linha[89:99].strip(),
        "Mensagem 3": linha[99:139].strip(),
        "Mensagem 4": linha[139:179].strip(),
        "Uso Exclusivo FEBRABAN": linha[179:199].strip(),
        "Cod Ocorrencia Sacado": linha[199:207],
        "C√≥digo do banco na conta do d√©bito": linha[207:210],
        "C√≥digo da ag√™ncia do debito": linha[210:215],
        "Verificador da ag√™ncia": linha[215:216],
        "Conta corrente do d√©bito": linha[216:228],
        "Digito da conta corrente": linha[228:229],
        "Digito verificador da ag√™ncia/conta": linha[229:230],
        "Aviso para d√©bito autom√°tico": linha[230:231], 
        "Uso Exclusivo FEBRABAN": linha[231:240].strip()
    }
    
def extrair_trailer_lote(linha):
    return {
        "C√≥digo do Banco": linha[0:3],
        "Lote de Servi√ßo": linha[3:7],
        "Tipo de Registro": linha[7:8],
        "Uso Exclusivo FEBRABAN": linha[8:17],
        "Quantidade de Registros do Lote": linha[17:23],
        "Somat√≥ria dos Valores": linha[23:41],
        "Somat√≥ria de Quantidade de Moeda": linha[41:59],
        "Aviso aos Sacados": linha[59:60],
        "Uso Exclusivo FEBRABAN": linha[60:240].strip()
    }

def extrair_trailer_arquivo(linha):
    return {
        "C√≥digo do Banco": linha[0:3],
        "Lote de Servi√ßo": linha[3:7],
        "Tipo de Registro": linha[7:8],
        "Uso Exclusivo FEBRABAN": linha[8:17],
        "Quantidade de Lotes": linha[17:23],
        "Quantidade de Registros": linha[23:29],
        "Qtde de Contas p conc lotes": linha[29:35],
        "Uso Exclusivo FEBRABAN": linha[35:240].strip()
    }

# === Interface ===
st.set_page_config(page_title="Conferidor CNAB240", layout="wide")

# T√≠tulo principal
#st.title("üìÑ Conferidor cnab240: particularidades bb")

st.markdown(
    """
    <h1 style='
        font-size: 36px;
        color: white;
        font-family: "Calibri", sans-serif;
        text-align: left;
        font-weight: normal;
        margin-bottom: 20px;
    '>
    üîç Conferidor CNAB240: particularidades BB
    </h1>
    """,
    unsafe_allow_html=True
)


# Lembretes √∫teis
with st.expander("üìå Lembretes para sua confer√™ncia (sua 'colinha')"):
    st.markdown("""
    **üîÑ Tipo de Movimento**  
    - `01` ‚Üí Entrada  
    - `02` ‚Üí Baixa  

    **üíº C√≥digo da Carteira**  
    - `2` ‚Üí Vinculada  
    - `4` ‚Üí Descontada  
    - `7` ‚Üí Simples  
    - `8` ‚Üí Pr√™mio de Seguro  

    **üí∞ C√≥digo de Juros**  
    - `0` ‚Üí Sem juros ou cadastro no banco
    - `1` ‚Üí Valor por dia  
    - `2` ‚Üí Taxa mensal  
    - `3` ‚Üí Isento

    **üì£ C√≥digo de Protesto**  
    - `1` ‚Üí Protestar dias corridos  
    - `2` ‚Üí Protestar dias √∫teis  
    - `3` ‚Üí N√£o protestar  
    
    **üõë C√≥digo de baixa**
    - `0` ‚Üí Sem info/cadastro no banco
    - `1` ‚Üí Baixar
    - `2` ‚Üí N√£o baixar
    - `3` ‚Üí Cancelar prazo de baixa
    
    **‚ö†Ô∏è C√≥digo da Multa**
    - `0` ‚Üí Sem info/cadastro no banco
    - `1` ‚Üí Multa Valor Fixo
    - `2` ‚Üí Multa Percentual
    - '3' ‚Üí Isento
    
    obs: Informa√ß√µes de Baixa, Juros e Multa: se deixados em branco o sistema assume os valores cadastrados no banco.
    """)
    
# Upload do arquivo .REM ou .TXT
uploaded_file = st.file_uploader("üì§ Fa√ßa o upload do arquivo de boletos padr√£o CNAB240 (.REM ou .TXT)", type=["txt", "rem"])

if uploaded_file:
    linhas = uploaded_file.read().decode("utf-8").splitlines()

    # Inicializa listas
    header_arquivo = []
    header_lote = []
    segmentos_p = []
    segmentos_q = []
    segmentos_r = []
    segmentos_s = []
    trailer_lote = []
    trailer_arquivo = []

    # Processa cada linha
    for linha in linhas:
        if len(linha) < 240:
            linha = linha.ljust(240)

        tipo = linha[7:8]
        segmento = linha[13:14]

        if tipo == '0':
            header_arquivo.append(extrair_header_arquivo(linha))

        elif tipo == '1':
            header_lote.append(extrair_header_lote(linha))

        elif tipo == '3':
            if segmento == 'P':
                segmentos_p.append(extrair_segmento_p(linha))
            elif segmento == 'Q':
                segmentos_q.append(extrair_segmento_q(linha))
            elif segmento == 'R':
                segmentos_r.append(extrair_segmento_r(linha))
            elif segmento == 'S':
                segmentos_s.append(extrair_segmento_s(linha))

        elif tipo == '5':
            trailer_lote.append(extrair_trailer_lote(linha))

        elif tipo == '9':
            trailer_arquivo.append(extrair_trailer_arquivo(linha))

    # Cria DataFrames
    df_header = pd.DataFrame(header_arquivo)
    df_header_lote = pd.DataFrame(header_lote)
    df_segmento_p = pd.DataFrame(segmentos_p)
    df_segmento_q = pd.DataFrame(segmentos_q)
    df_segmento_r = pd.DataFrame(segmentos_r)
    df_segmento_s = pd.DataFrame(segmentos_s)
    df_trailer_lote = pd.DataFrame(trailer_lote)
    df_trailer_arquivo = pd.DataFrame(trailer_arquivo)

    # === Destaques ===.
    
    # Dicion√°rios de explica√ß√£o
    movimentos = {
    "01": "Entrada de t√≠tulo",
    "02": "Baixa",
    "04": "Abatimento",
    "05": "Cancelar Abatimento",
    "06": "Alterar Vencimento",
    "08": "Cancelamento de desconto",
    "09": "Protestar",
    "10": "Susta√ß√£o de protesto",
    "12": "Alterar juros",
    "13": "Dispensar juros",
    "14": "Cobrar multa",
    "15": "Dispensar multa",
    "16": "Alterar dados do desconto",
    "19": "Alterar prazo limite de recebimento",
    "20": "Dispensar prazo limite de recebimento",
    "21": "Alterar n√∫mero do t√≠tulo",
    "22": "Alterar n√∫mero controle do participante",
    "23": "Alterar nome e endere√ßo do sacado",
    "30": "Recusa da alega√ß√£o do sacado",
    "31": "Altera√ß√£o de outros dados",
    "34": "Alterar data do desconto",
    "40": "Alterar modalidade",
    "45": "Negativa√ß√£o sem protesto",
    "46": "Exclus√£o de Negativa√ß√£o sem protesto",
    "47": "Alterar valor nominal do t√≠tulo",}
    
    carteiras = {
    "1": "Simples Febraban",
    "2": "Vinculada",
    "3": "Caucionada Febraban",
    "4": "Descontada",
    "5": "Vendor",
    "6": "Cess√£o de Cr√©dito",
    "7": "Simples",
    "8": "Pr√™mio de Seguro"}
    
    juros = {
    "0": "Sem juros ou cadastro no banco",
    "1": "Valor por dia",
    "2": "Taxa mensal",
    "3": "Isento"}
    
    protesto = {
    "0": "Sem informa√ß√£o, se vinculada assume 3 dias", 
    "1": "Protestar dias corridos",
    "2": "Protestar dias √∫teis",
    "3": "N√£o protestar",
    "4": "Protestar fim falimentar - dias √∫teis",
    "5": "Protestar fim falimentar - dias corridos",
    "7": "N√£o negativar",
    "8": "Negativa√ß√£o sem protesto",
    "9": "Cancelamento protesto Autom√°tico / rem 31"}
    
    multas = {        
    "0": "Sem info/cadastro no banco",
    "1": "Multa Valor Fixo",
    "2": "Multa Percentual"}
    
    baixas = {
    "0": "Sem info/cadastro no banco",
    "1": "Baixar",        
    "2": "N√£o Baixar",
    "3": "Cancelar Prazo de Baixa"}
        
    # Cria colunas explicativas no df_segmento_p
    df_segmento_p["Tipo de Movimento Explicado"] = df_segmento_p["Tipo de Movimento"].apply(
    lambda x: f"{x} ({movimentos.get(str(x).zfill(2), 'Desconhecido')})")
    
    df_segmento_p["C√≥digo da Carteira Explicado"] = df_segmento_p["C√≥digo da Carteira"].apply(
    lambda x: f"{x} ({carteiras.get(str(x), 'Desconhecido')})")
    
    df_segmento_p["C√≥digo do Juros Explicado"] = df_segmento_p["C√≥digo do Juros"].apply(
    lambda x: f"{x} ({juros.get(str(x), 'Desconhecido')})")
    
    df_segmento_p["C√≥digo para Protesto Explicado"] = df_segmento_p["C√≥digo para Protesto"].apply(
    lambda x: f"{x} ({protesto.get(str(x), 'Desconhecido')})")    
    
    df_segmento_p["C√≥digo para Baixa Explicado"] = df_segmento_p["C√≥digo para Baixa"].apply(
    lambda x: f"{x} ({baixas.get(str(x), 'Desconhecido')})")  
  
    # Explica√ß√£o para df_segmento_r ‚Äî somente se a coluna existir
    if not df_segmento_r.empty and "C√≥digo da multa" in df_segmento_r.columns:
        df_segmento_r["C√≥digo da Multa Explicado"] = df_segmento_r["C√≥digo da multa"].apply(
            lambda x: f"{x} ({multas.get(str(x), 'Desconhecido')})")
    else:
        print("Segmento R ausente ou sem a coluna 'C√≥digo da multa'.")
      
    # === Destaques ===
    st.subheader("üîç Header do Arquivo")
    campos_header = [
    "N√∫mero do Conv√™nio", "Carteira", "Varia√ß√£o da Carteira",
    "Ag√™ncia", "DV Ag√™ncia", "Conta", "DV Conta"
    ]
    st.dataframe(df_header[campos_header])
    
    st.subheader("üìå Segmento P - T√≠tulos")
    campos_segmento_p = [
    "Nosso Numero", "Tipo de Movimento Explicado", "C√≥digo da Carteira Explicado",
    "Data de Vencimento", "Valor Nominal", "C√≥digo do Juros Explicado",
    "Data do Juros", "Valor do Juros", "C√≥digo para Protesto Explicado", "Dias para Protesto", "C√≥digo para Baixa Explicado", "Dias para Baixa"]
    st.dataframe(df_segmento_p[campos_segmento_p])
    
    # ‚úÖ Segmento R com verifica√ß√£o segura
    colunas_r = ["C√≥digo da Multa Explicado", "Data da multa", "Valor da multa"]
    
    if not df_segmento_r.empty and all(col in df_segmento_r.columns for col in colunas_r):
        st.subheader("üìé Segmento R - Multa por Atraso")
        st.dataframe(df_segmento_r[colunas_r])
    else:
        st.info("‚ÑπÔ∏è Este arquivo n√£o cont√©m Segmento R ou os campos esperados de multa.")
    
                    
                 
    # === Exporta Excel ===
    
    caminho_excel = "cnab240modelo_completo.xlsx"
           
    with pd.ExcelWriter(caminho_excel, engine="openpyxl") as writer:
        df_header.to_excel(writer, sheet_name="Header", index=False)
        df_segmento_p.to_excel(writer, sheet_name="Segmento P", index=False)
        df_segmento_q.to_excel(writer, sheet_name="Segmento Q", index=False)
        df_segmento_r.to_excel(writer, sheet_name="Segmento R", index=False)
        df_segmento_s.to_excel(writer, sheet_name="Segmento S", index=False)
        df_header_lote.to_excel(writer, sheet_name="Header Lote", index=False)
        df_trailer_lote.to_excel(writer, sheet_name="Trailer Lote", index=False)
        df_trailer_arquivo.to_excel(writer, sheet_name="Trailer Arquivo", index=False)
    
    #reabrir
    wb = load_workbook(caminho_excel)
    
    for sheet in wb.worksheets:
        for column_cells in sheet.columns:
            max_length = 0
            column_letter = column_cells[0].column_letter
        for cell in column_cells:
            if cell.value:
                max_length = max(max_length, len(str(cell.value)))
        adjusted_width = (max_length + 2) * 1.2  # margem extra
        sheet.column_dimensions[column_letter].width = adjusted_width
    
    wb.save(caminho_excel)
         
    # Bot√£o para download
    with open(caminho_excel, "rb") as f:
        st.download_button(
        label="üì• Baixar Excel Final",
        data=f,
        file_name="cnab240modelo_completo.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
            
#background

logo_url = "https://idgifts.com.br/wp-content/uploads/2022/04/banco-brasil.png"

st.markdown(
    f"""
    <style>
    .stApp {{
        background-image: url("{logo_url}");
        background-repeat: no-repeat;
        background-position: bottom center;
        background-size: 200px;
        opacity: 1;
    }}

    .stApp::before {{
        content: "";
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url("{logo_url}");
        background-repeat: no-repeat;
        background-position: center;
        background-size: 150px;
        opacity: 0.05;
        z-index: -1;
    }}
    </style>
    """,
    unsafe_allow_html=True
)


# Rodap√© estilizado
st.markdown("""
    <hr style="border:1px solid #ccc" />

    <div style='text-align: center; font-size: 14px; color: gray;'>
        ¬©Desenvolvido por <strong>W.Teo</strong> ¬∑ 
        <a href='mailto:wteosouza@gmail.com'>wteosouza@gmail.com</a>
    </div>
""", unsafe_allow_html=True)

# Para rodar no terminal:
# streamlit run app.py --logger.level debug
##### https://conferidor-cnab240.streamlit.app/